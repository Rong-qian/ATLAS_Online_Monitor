----------------------------------------------------------------------------------
-- Company: Umich
-- Engineer: Xueye Hu
-- 
-- Create Date: 10/30/2020 04:26:03 PM
-- Design Name: 
-- Module Name: tdc_decoder_top - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library ieee;
use ieee.std_logic_1164.all;

package bus_multiplexer_pkg is
    type conf2b_array is array(natural range <>) of std_logic_vector(1 downto 0);
end package;
    
--! Xilinx devices library:
library unisim;
use unisim.vcomponents.all;

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.bus_multiplexer_pkg.all;

entity tdc_decoder_slave_top is
  Port (
        reset_checker_i_s  : in  std_logic;
        ser320_clk_i_s     : in  std_logic;
        ser320_clkEn_i_s   : in  std_logic;

        data_rate_i_s      : in  std_logic;

        elink_config_i_s   : in  conf2b_array(27 downto 0);

        error_detected_o_s : out std_logic_vector(27 downto 0);

        userDataUpLink_i_s : in  std_logic_vector(229 downto 0);
        
        clk_200            : in  std_logic;
        
        -- ethernet interface
        tx_axis_clk        : in  std_logic;        
        tx_axis_fifo_tdata : out std_logic_vector(7 downto 0);
        tx_axis_fifo_tvalid: out std_logic;
        tx_axis_fifo_tready: in  std_logic;
        tx_axis_fifo_tlast : out std_logic
         );
end tdc_decoder_slave_top;

architecture Behavioral of tdc_decoder_slave_top is

--  component amt_tdc_decoder_320mbps is      
--       Port (
--               user_rst                                                   : in std_logic;
--               RESET_I                                                    : in  std_logic;             
--               RX_FRAMECLK_I                                              : in  std_logic;     
--               tdc_d0_DATA_I                                              : in  std_logic_vector(7 downto 0); 
--               tdc_d1_DATA_I                                              : in  std_logic_vector(7 downto 0);                
              
--               GBT_RX_READY_I                                             : in std_logic
--          );
--  end component;
  component tdcv2_decoder is      
       Port (
               rst                                                        : in  std_logic;            
               clk                                                        : in  std_logic; 
               clk_200                                                    : in  std_logic; 
               clk_125                                                    : in  std_logic; 
               tdc_dline_1                                                : in  std_logic_vector(7 downto 0); 
               tdc_dline_0                                                : in  std_logic_vector(7 downto 0);                       
               tx_axis_fifo_tdata                                         : out std_logic_vector(7 downto 0);        
               tx_axis_fifo_tvalid                                        : out std_logic;            
               tx_axis_fifo_tready                                        : in  std_logic;            
               tx_axis_fifo_tlast                                         : out std_logic                  
               
                               
          );
  end component;


    type elink_320m_T        is array(integer range <>) of std_logic_vector(7 downto 0);
    signal elink_320m_s      : elink_320m_T(27 downto 0);  -- Maximum of 28 links @ 320Mbps
    
    signal reset320_s        : std_logic;
    signal rst_dst_s         : std_logic;  
    
    signal TDC10_CH1_IN          : std_logic_vector(7 downto 0);          
    signal TDC10_CH2_IN          : std_logic_vector(7 downto 0);  
    signal TDC11_CH1_IN          : std_logic_vector(7 downto 0);
    signal TDC11_CH2_IN          : std_logic_vector(7 downto 0);      
    signal TDC12_CH1_IN          : std_logic_vector(7 downto 0);
    signal TDC12_CH2_IN          : std_logic_vector(7 downto 0);         
    signal TDC13_CH1_IN          : std_logic_vector(7 downto 0);
    signal TDC13_CH2_IN          : std_logic_vector(7 downto 0);
    signal TDC14_CH1_IN          : std_logic_vector(7 downto 0);
    signal TDC14_CH2_IN          : std_logic_vector(7 downto 0);
    signal TDC15_CH1_IN          : std_logic_vector(7 downto 0);
    signal TDC15_CH2_IN          : std_logic_vector(7 downto 0);
    signal TDC16_CH1_IN          : std_logic_vector(7 downto 0);    
    signal TDC16_CH2_IN          : std_logic_vector(7 downto 0);    
    signal TDC17_CH1_IN          : std_logic_vector(7 downto 0);    
    signal TDC17_CH2_IN          : std_logic_vector(7 downto 0);     

    
    
begin

    reset_synch_proc: process(reset_checker_i_s, ser320_clk_i_s)
        begin
            if reset_checker_i_s = '1' then
                rst_dst_s  <= '1';
                reset320_s <= '1';
            elsif rising_edge(ser320_clk_i_s) then
                rst_dst_s  <= '0';
                reset320_s <= rst_dst_s;
            end if;
    end process;

-- 320Mbps elink bits extracted from uplink 230bit (slave LpGBT)
    elink_320m_s(0)     <= userDataUpLink_i_s(7 downto 0);       
    elink_320m_s(1)     <= userDataUpLink_i_s(15 downto 8);  
    elink_320m_s(2)     <= userDataUpLink_i_s(23 downto 16); 
    elink_320m_s(3)     <= userDataUpLink_i_s(31 downto 24); 
    elink_320m_s(4)     <= userDataUpLink_i_s(39 downto 32); 
    elink_320m_s(5)     <= userDataUpLink_i_s(47 downto 40); 
    elink_320m_s(6)     <= userDataUpLink_i_s(55 downto 48); 
    elink_320m_s(7)     <= userDataUpLink_i_s(63 downto 56); 
    elink_320m_s(8)     <= userDataUpLink_i_s(71 downto 64); 
    elink_320m_s(9)     <= userDataUpLink_i_s(79 downto 72); 
    elink_320m_s(10)    <= userDataUpLink_i_s(87 downto 80);
    elink_320m_s(11)    <= userDataUpLink_i_s(95 downto 88);
    elink_320m_s(12)    <= userDataUpLink_i_s(103 downto 96);
    elink_320m_s(13)    <= userDataUpLink_i_s(111 downto 104);
    elink_320m_s(14)    <= userDataUpLink_i_s(119 downto 112);
    elink_320m_s(15)    <= userDataUpLink_i_s(127 downto 120);
    elink_320m_s(16)     <= userDataUpLink_i_s(135 downto 128);
    elink_320m_s(17)     <= userDataUpLink_i_s(143 downto 136);
    elink_320m_s(18)     <= userDataUpLink_i_s(151 downto 144);
    elink_320m_s(19)     <= userDataUpLink_i_s(159 downto 152);
    elink_320m_s(20)     <= userDataUpLink_i_s(167 downto 160);
    elink_320m_s(21)     <= userDataUpLink_i_s(175 downto 168);
    elink_320m_s(22)     <= userDataUpLink_i_s(183 downto 176);
    elink_320m_s(23)     <= userDataUpLink_i_s(191 downto 184);
    elink_320m_s(24)     <= userDataUpLink_i_s(199 downto 192);
    elink_320m_s(25)     <= userDataUpLink_i_s(207 downto 200);
    elink_320m_s(26)     <= userDataUpLink_i_s(215 downto 208);
    elink_320m_s(27)     <= userDataUpLink_i_s(223 downto 216);    

-- TDC data extracted from 320Mbps elink bits 

    TDC10_CH1_IN <= elink_320m_s(27);
    TDC10_CH2_IN <= elink_320m_s(26);
    
    TDC11_CH1_IN <= elink_320m_s(16);
    TDC11_CH2_IN <= elink_320m_s(15);
    
    TDC12_CH1_IN <= elink_320m_s(25);
    TDC12_CH2_IN <= elink_320m_s(24); 
       
    TDC13_CH1_IN <= elink_320m_s(15);
    TDC13_CH2_IN <= elink_320m_s(14);
    
    TDC14_CH1_IN <= elink_320m_s(19);
    TDC14_CH2_IN <= elink_320m_s(18);

    TDC15_CH1_IN <= elink_320m_s(4);
    TDC15_CH2_IN <= elink_320m_s(5);
    
    TDC16_CH1_IN <= elink_320m_s(0);
    TDC16_CH2_IN <= elink_320m_s(1);
    TDC17_CH1_IN <= elink_320m_s(6);
    TDC17_CH2_IN <= elink_320m_s(7);    

--    dataCheck_AMTpattern_inst: amt_tdc_decoder_320mbps                
--            port map (
--                      user_rst                                       => reset320_s, -- '1' reset
--                      RESET_I                                        => '0',         
--                      RX_FRAMECLK_I                                  => ser320_clk_i_s,  -- 40MHz from top
--                      -----------------------------------------------------------------------------------    
--                      tdc_d0_DATA_I                                  => TDC16_CH1_IN,
--                      tdc_d1_DATA_I                                  => TDC17_CH1_IN,        

--                      -----------------------------------------------------------------------------------           
--                      GBT_RX_READY_I                                 => '1'
--                      );   
    tdcv2_decoder_inst: tdcv2_decoder                
            port map (
                      rst                                           => reset320_s, -- '1' reset         
                      clk                                           => ser320_clk_i_s,  -- 40MHz from top
                      clk_200                                       => clk_200,  -- 200MHz from top
                      -----------------------------------------------------------------------------------    
                      tdc_dline_1                                   => TDC16_CH1_IN,
                      tdc_dline_0                                   => TDC16_CH2_IN,
                      clk_125                                       => tx_axis_clk,         
                      tx_axis_fifo_tdata                            => tx_axis_fifo_tdata,
                      tx_axis_fifo_tvalid                           => tx_axis_fifo_tvalid,
                      tx_axis_fifo_tready                           => tx_axis_fifo_tready,        
                      tx_axis_fifo_tlast                            => tx_axis_fifo_tlast                      
                              
                      ); 
  

end Behavioral;
