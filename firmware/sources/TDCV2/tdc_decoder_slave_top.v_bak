/* 
       _________   ________     ________       
      / U OF M  \ | LSA    \   / Physics\
      \__ATLAS__/ |   ___   | |   ______/
         |   |    |  |   \  | |  |
         |   |    |  |___/  | |  \______     
         |   |    |         | |         \
         \___/    |________/   \________/
*/  

// Author : Yuxiang Guo  gyuxiang@umich.edu
// File   : tdc_decoder_slave_top.v
// Create : 2021-03-10 14:45:53
// Revise : 2021-03-23 00:07:57
// Editor : sublime text3, tab size (2)
// Description: 
//
// -----------------------------------------------------------------------------

module tdc_decoder_slave_top(
    input reset_checker_i,
    input ser320_clk_i,
    input ser320_clkEn_i,
    input data_rate_i,
    input [229:0] userDataUpLink_i,
    // input [27:0] elink_config_i[1:0],
    input trigger_in,
    output [27:0] error_detected_o,
    output [1:0] encode_ttc,
    output [23:0] hit,

    
    input sys_clk_160,

    //  ethernet interface
    input tx_axis_clk,
    output [7:0] tx_axis_fifo_tdata,
    output tx_axis_fifo_tvalid,
    input tx_axis_fifo_tready,
    output tx_axis_fifo_tlast
);

wire [7:0] elink_320m [27:0]; //Maximum of 28 links @ 320Mbps
reg reset320;
reg rst_dst;
localparam TDC_COUNT = 8;
localparam csm_id = 3'b0;
localparam TDC_DATA_WIDTH = 40;


wire [7:0] tdc_dline_1[TDC_COUNT-1:0];
wire [7:0] tdc_dline_0[TDC_COUNT-1:0];

generate
    genvar i;
    for (i = 0; i < 28; i = i + 1) begin
        assign elink_320m[i] = userDataUpLink_i[i*8+7:i*8]; 
    end   
endgenerate
// TDC data extracted from 320Mbps elink bits 
assign tdc_dline_1[0] = elink_320m[27];
assign tdc_dline_0[0] = elink_320m[26]; 
assign tdc_dline_1[1] = elink_320m[16];
assign tdc_dline_0[1] = elink_320m[15];
assign tdc_dline_1[2] = elink_320m[25];
assign tdc_dline_0[2] = elink_320m[24];
assign tdc_dline_1[3] = elink_320m[15];
assign tdc_dline_0[3] = elink_320m[14];
assign tdc_dline_1[4] = elink_320m[19];
assign tdc_dline_0[4] = elink_320m[18];
assign tdc_dline_1[5] = elink_320m[4]; 
assign tdc_dline_0[5] = elink_320m[5]; 
assign tdc_dline_1[6] = elink_320m[0]; 
assign tdc_dline_0[6] = elink_320m[1]; 
assign tdc_dline_1[7] = elink_320m[6]; 
assign tdc_dline_0[7] = elink_320m[7]; 

// TDC**_CH*_IN corresponds to lpGBT_CSM board schematic net name;
// tdc_dline_1 mapped to TDC**_CH1_IN, tdc_dline_0 mapped to TDC**_CH2_IN.
// wire [7:0] TDC10_CH1_IN; assign TDC10_CH1_IN = elink_320m[27]; assign tdc_dline_1[0] = elink_320m[27];
// wire [7:0] TDC10_CH2_IN; assign TDC10_CH2_IN = elink_320m[26]; assign tdc_dline_0[0] = elink_320m[26]; 
// wire [7:0] TDC11_CH1_IN; assign TDC11_CH1_IN = elink_320m[16]; assign tdc_dline_1[0] = elink_320m[16];
// wire [7:0] TDC11_CH2_IN; assign TDC11_CH2_IN = elink_320m[15]; assign tdc_dline_0[0] = elink_320m[15];
// wire [7:0] TDC12_CH1_IN; assign TDC12_CH1_IN = elink_320m[25]; assign tdc_dline_1[0] = elink_320m[25];
// wire [7:0] TDC12_CH2_IN; assign TDC12_CH2_IN = elink_320m[24]; assign tdc_dline_0[0] = elink_320m[24];
// wire [7:0] TDC13_CH1_IN; assign TDC13_CH1_IN = elink_320m[15]; assign tdc_dline_1[0] = elink_320m[15];
// wire [7:0] TDC13_CH2_IN; assign TDC13_CH2_IN = elink_320m[14]; assign tdc_dline_0[0] = elink_320m[14];
// wire [7:0] TDC14_CH1_IN; assign TDC14_CH1_IN = elink_320m[19]; assign tdc_dline_1[0] = elink_320m[19];
// wire [7:0] TDC14_CH2_IN; assign TDC14_CH2_IN = elink_320m[18]; assign tdc_dline_0[0] = elink_320m[18];
// wire [7:0] TDC15_CH1_IN; assign TDC15_CH1_IN = elink_320m[4];  assign tdc_dline_1[0] = elink_320m[4]; 
// wire [7:0] TDC15_CH2_IN; assign TDC15_CH2_IN = elink_320m[5];  assign tdc_dline_0[0] = elink_320m[5]; 
// wire [7:0] TDC16_CH1_IN; assign TDC16_CH1_IN = elink_320m[0];  assign tdc_dline_1[0] = elink_320m[0]; 
// wire [7:0] TDC16_CH2_IN; assign TDC16_CH2_IN = elink_320m[1];  assign tdc_dline_0[0] = elink_320m[1]; 
// wire [7:0] TDC17_CH1_IN; assign TDC17_CH1_IN = elink_320m[6];  assign tdc_dline_1[0] = elink_320m[6]; 
// wire [7:0] TDC17_CH2_IN; assign TDC17_CH2_IN = elink_320m[7];  assign tdc_dline_0[0] = elink_320m[7]; 


wire [4:0] tdc_id[TDC_COUNT-1:0];
generate
    genvar k;
    for (k = 0; k < TDC_COUNT; k = k + 1) begin
        assign tdc_id[k] = k+5'd10; 
    end   
endgenerate


// // map TDC dline here
// assign tdc_dline_1[0] = TDC16_CH1_IN;
// assign tdc_dline_0[0] = TDC16_CH2_IN;
// assign tdc_id[0] = 5'd16;
// assign tdc_dline_1[1] = TDC14_CH1_IN;
// assign tdc_dline_0[1] = TDC14_CH2_IN;
// assign tdc_id[1] = 5'd14;
// // mapping end

wire enable_K28_1;
wire relock;
wire [19:0] correct_counter_th;
wire [TDC_COUNT-1:0] locked_dline1;
wire [TDC_COUNT-1:0] locked_dline0;
wire [3:0] shift_dline1[TDC_COUNT-1:0];
wire [3:0] shift_dline0[TDC_COUNT-1:0];
wire [TDC_COUNT-1:0] matching_busy;
wire [TDC_COUNT-1:0] tdc_fifo_read;
wire [TDC_COUNT-1:0] tdc_fifo_empty;
// wire [TDC_DATA_WIDTH-1:0] tdc_fifo_data[TDC_COUNT-1:0];
wire [TDC_COUNT*TDC_DATA_WIDTH-1:0] tdc_fifo_data;

wire tdc_fifo_empty_mux;
wire matching_busy_mux;
wire tdc_fifo_read_mux;
wire [TDC_DATA_WIDTH-1:0] tdc_fifo_data_mux;



wire [28:0] trigger_fifo_data;
wire trigger_fifo_empty;
wire building_busy;
wire trigger_fifo_read;
wire [11:0] trigger_coarse;
wire [11:0] match_window;
wire [11:0] search_margin;
wire [11:0] bc_offset;
wire [11:0] reject_offset;
wire [11:0] rollover;
wire enable_relative_trigger_BCID;
wire enable_relative_trigger_data;

wire [TDC_DATA_WIDTH-1:0] event_data;
wire [TDC_DATA_WIDTH-1:0] readout_fifo_data;
wire readout_fifo_empty;
wire readout_fifo_full;
wire readout_fifo_read;
//vio for ethernet enable
wire packet_rst;
wire packet_enable;

//vio for trigger matching
wire enable_matching;
wire matching_reset;
wire bc_reset;
wire event_reset;
wire trigger_redge;
wire [11:0] coarse_count_offset;
wire [7:0] trigger_latency; 

//vio for ttc generator
wire fpga_bcr;
wire ttc_start_single;
wire ttc_start_continuous;
wire ttc_bc_reset_en;
wire ttc_master_reset_en;
wire [11:0] ttc_interval;

wire enable_hit;
wire [11:0] width_hit;  //hit width = width_hit*6.25ns
wire hit_inv;
wire [23:0] hit_mask;
wire [11:0] hit_interval;






always @(posedge ser320_clk_i or posedge reset_checker_i) begin
    if (reset_checker_i == 1'b1) begin
        rst_dst  <= 1'b1;
        reset320 <= 1'b1;        
    end else begin
        rst_dst  <= 1'b0;
        reset320 <= rst_dst;
    end
end


trigger_interface inst_trigger_interface
(
    .clk                 (sys_clk_160),
    .rst                 (matching_reset),
    .bc_reset            (fpga_bcr),
    .event_reset         (event_reset),
    .trigger_in          (trigger_in),
    .trigger_read        (trigger_fifo_read),
    .trigger_fifo_data   (trigger_fifo_data),
    .trigger_fifo_empty  (trigger_fifo_empty),
    .trigger_coarse      (trigger_coarse),
    .trigger_redge       (trigger_redge),
    .rollover            (rollover),
    .coarse_count_offset (coarse_count_offset),
    .trigger_latency     (trigger_latency)
);



generate
    genvar j;
    for (j = 0; j < TDC_COUNT; j = j + 1) begin: tdcv2_decoder
        tdcv2_decoder inst_tdcv2_decoder
        (
            .clk                          (ser320_clk_i),
            .sys_clk_160                  (sys_clk_160),
            .rst                          (reset320),
            .matching_reset               (matching_reset),
            .tdc_dline_1                  (tdc_dline_1[j]),
            .tdc_dline_0                  (tdc_dline_0[j]),
            .tdc_id                       (tdc_id[j]),
            .csm_id                       (csm_id),

            .tdc_fifo_read                (tdc_fifo_read[j]),
            .tdc_fifo_empty               (tdc_fifo_empty[j]),
            .tdc_fifo_data                (tdc_fifo_data[(j+1)*TDC_DATA_WIDTH-1:j*TDC_DATA_WIDTH]),

            .enable_K28_1                 (enable_K28_1),
            .relock                       (relock),
            .correct_counter_th           (correct_counter_th),
            .locked_dline1                (locked_dline1[j]),
            .locked_dline0                (locked_dline0[j]),
            .shift_dline1                 (shift_dline1[j]),
            .shift_dline0                 (shift_dline0[j]),

            .matching_busy                (matching_busy[j]),
            .enable_matching              (enable_matching),
            .trigger_fifo_data            (trigger_fifo_data),
            .trigger_fifo_empty           (trigger_fifo_empty),
            .building_busy                (building_busy),
            .trigger_coarse               (trigger_coarse),
            .match_window                 (match_window),
            .search_margin                (search_margin),
            .bc_offset                    (bc_offset),
            .reject_offset                (reject_offset),
            .rollover                     (rollover),
            .enable_relative_trigger_BCID (enable_relative_trigger_BCID),
            .enable_relative_trigger_data (enable_relative_trigger_data)
        );
    end   
endgenerate



tdc_fifo_data_mux #(
    .TDC_COUNT(TDC_COUNT),
    .TDC_DATA_WIDTH(TDC_DATA_WIDTH)
) inst_tdc_fifo_data_mux (
    .locked             (locked_dline0&locked_dline1),
    .tdc_fifo_empty     (tdc_fifo_empty),
    .tdc_fifo_data      (tdc_fifo_data),
    .matching_busy      (matching_busy),
    .tdc_fifo_read      (tdc_fifo_read),

    .tdc_fifo_empty_mux (tdc_fifo_empty_mux),
    .tdc_fifo_data_mux  (tdc_fifo_data_mux),
    .matching_busy_mux  (matching_busy_mux),
    .tdc_fifo_read_mux  (tdc_fifo_read_mux)
);


event_builder inst_event_builder
(
    .clk                (sys_clk_160),
    .rst                (matching_reset),
    .enable             (1'b1),
    .enable_timeout     (1'b1),
    .trigger_fifo_empty (trigger_fifo_empty),
    .trigger_fifo_data  (trigger_fifo_data),
    .trigger_fifo_read  (trigger_fifo_read),
    .tdc_fifo_empty     (tdc_fifo_empty_mux),
    .tdc_fifo_data      (tdc_fifo_data_mux),
    .matching_busy      (matching_busy_mux),
    .tdc_fifo_read      (tdc_fifo_read_mux),
    .readout_fifo_full  (readout_fifo_full),
    .event_data         (event_data),
    .event_data_ready   (event_data_ready),
    .building_busy      (building_busy)
);

readout_fifo readout_fifo_inst (
    .srst(matching_reset),                // input wire srst
    .wr_clk(sys_clk_160),            // input wire wr_clk
    .rd_clk(tx_axis_clk), 
    .din(event_data),                  // input wire [39 : 0] din
    .wr_en(event_data_ready),              // input wire wr_en
    .rd_en(readout_fifo_read),              // input wire rd_en
    .dout(readout_fifo_data),                // output wire [39 : 0] dout
    .full(readout_fifo_full),                // output wire full
    .empty(readout_fifo_empty),              // output wire empty
    .wr_rst_busy(),  // output wire wr_rst_busy
    .rd_rst_busy()  // output wire rd_rst_busy
);


ttc_generator ttc_generator_inst
(
    .clk_40           (ser320_clk_i),
    .rst              (reset_checker_i),
    .encode_ttc       (encode_ttc),
    .fpga_bcr         (fpga_bcr),
    .start_single     (ttc_start_single),
    .start_continuous (ttc_start_continuous),
    .trigger          (1'b0),
    .bc_reset_en      (ttc_bc_reset_en),
    .event_reset_en   (1'b0),
    .master_reset_en  (ttc_master_reset_en),
    .interval         (ttc_interval)
);

data_packet data_packet_inst (
    .clk(tx_axis_clk),
    .rst(packet_rst),
    .enable(packet_enable),
    .TDC_fifo_data(readout_fifo_data),
    .TDC_data_ready(~readout_fifo_empty),
    .TDC_data_rd(readout_fifo_read),
    
    .data_to_eth(tx_axis_fifo_tdata),
    .packet_valid(tx_axis_fifo_tvalid),
    .tx_axis_fifo_tready(tx_axis_fifo_tready),
    .last(tx_axis_fifo_tlast)
);




hit_generator inst_hit_generator
(
    .clk          (sys_clk_160),
    .rst          (matching_reset),
    .hit          (hit),
    .width        (width_hit),
    .start        (enable_hit),
    .inv          (hit_inv),
    .hit_mask     (hit_mask),
    .interval     (hit_interval),
    .start_single (1'b0)
);


vio_ethernet_enable vio_ethernet_enable_inst(
    .clk(tx_axis_clk),
    .probe_out0(packet_rst),
    .probe_out1(packet_enable)
);

vio_trigger vio_trigger_inst (
  .clk(sys_clk_160),                // input wire clk
  .probe_out0(matching_reset),  // output wire [0 : 0] probe_out0
  // .probe_out1(trigger),  // output wire [0 : 0] probe_out1
  .probe_out2(match_window),  // output wire [11 : 0] probe_out2
  .probe_out3(search_margin),  // output wire [11 : 0] probe_out3
  .probe_out4(bc_offset),  // output wire [11 : 0] probe_out4
  .probe_out5(reject_offset),  // output wire [11 : 0] probe_out5
  .probe_out6(rollover),  // output wire [11 : 0] probe_out6
  .probe_out7(enable_relative_trigger_BCID),  // output wire [0 : 0] probe_out7
  .probe_out8(enable_relative_trigger_data),  // output wire [0 : 0] probe_out8
  .probe_out9(enable_matching),  // output wire [0 : 0] probe_out9
  .probe_out10(trigger_redge),  // output wire [0 : 0]
  .probe_out11(coarse_count_offset),
  .probe_out12(trigger_latency),
  .probe_out13(bc_reset),
  .probe_out14(event_reset),
  .probe_out15(enable_hit),  // output wire [0 : 0] probe_out15
  .probe_out16(width_hit),  // output wire [11 : 0] probe_out16
  .probe_out17(hit_inv),  // output wire [0 : 0] probe_out17
  .probe_out18(hit_mask),  // output wire [23 : 0] probe_out18
  .probe_out19(hit_interval)  // output wire [11 : 0] probe_out19
);




vio_40M vio_40M_inst (
    .clk(ser320_clk_i),                // input wire clk
    .probe_in0(locked_dline1),    // input wire [7 : 0] probe_in0
    .probe_in1(locked_dline0),    // input wire [7 : 0] probe_in1
    .probe_in2(shift_dline1[0]),    // input wire [3 : 0] probe_in2
    .probe_in3(shift_dline0[0]),    // input wire [3 : 0] probe_in3
    .probe_in4(shift_dline1[1]),    // input wire [3 : 0] probe_in4
    .probe_in5(shift_dline0[1]),    // input wire [3 : 0] probe_in5
    .probe_in6(shift_dline1[2]),    // input wire [3 : 0] probe_in6
    .probe_in7(shift_dline0[2]),    // input wire [3 : 0] probe_in7
    .probe_in8(shift_dline1[3]),    // input wire [3 : 0] probe_in8
    .probe_in9(shift_dline0[3]),    // input wire [3 : 0] probe_in9
    .probe_in10(shift_dline1[4]),    // input wire [3 : 0] probe_in10
    .probe_in11(shift_dline0[4]),    // input wire [3 : 0] probe_in11
    .probe_in12(shift_dline1[5]),    // input wire [3 : 0] probe_in12
    .probe_in13(shift_dline0[5]),    // input wire [3 : 0] probe_in13
    .probe_in14(shift_dline1[6]),    // input wire [3 : 0] probe_in14
    .probe_in15(shift_dline0[6]),    // input wire [3 : 0] probe_in15
    .probe_in16(shift_dline1[7]),    // input wire [3 : 0] probe_in16
    .probe_in17(shift_dline0[7]),    // input wire [3 : 0] probe_in17
    .probe_out0(relock),  // output wire [0 : 0] probe_out0
    .probe_out1(correct_counter_th),  // output wire [19 : 0] probe_out1
    .probe_out2(enable_K28_1),  // output wire [0 : 0] probe_out2
    .probe_out3(ttc_start_single),  // output wire [0 : 0] probe_out3
    .probe_out4(ttc_start_continuous),  // output wire [0 : 0] probe_out4
    .probe_out5(ttc_bc_reset_en),  // output wire [0 : 0] probe_out5
    .probe_out6(ttc_master_reset_en),  // output wire [0 : 0] probe_out6
    .probe_out7(ttc_interval)  // output wire [11 : 0] probe_out7
);


endmodule
