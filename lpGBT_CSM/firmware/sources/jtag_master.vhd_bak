-- Author: Bobby McGovern (rmcgov@umich.edu)
-- Description: This entity is a JTAG "master", which drives the TDI, TMS, TCK 
--              and TRST lines of a JTAG TAP.
--              It writes a fixed instruction register length but a dynamic 
--              data register length and can repeat these writes a dynamic 
--              number of times (to implement a variable-length single-
--              instruction multiple-device JTAG chain).
--              It is necessary for the input `clk` to have twice the frequency 
--              of the desired TCK speed.
--              It resets JTAG not by bringing TRST low, but rather by holding
--              TMS high for at least 5 TCK cycles; this can be done by 
--              assiging `rst` '1' then '0'.
--              When `busy` is low, bringing `en` high will execute an 
--              instruction register write and data register write to the JTAG
--              TAP; `busy` will not go low until this is complete AND `en` is
--              set low again.
--              The instruction register write writes `inst_len` bits from 
--              `inst_reg`, repeated `chain_len` times.
--              The data register write writes `data_len` bits from `data_reg`, 
--              repeated `chain_len` times.
--              All writes are performed LSB first.

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity jtag_master is
    generic(
        inst_len  : positive := 5; -- instruction register length
        num_data_len_bits  : positive := 8; -- number of bits needed to express data register length
                                            -- 8 bits: longest data word is 180 bits (AMT)
        num_chain_len_bits : positive := 5  -- number of bits needed to express JTAG chain length
                                            -- 5 bits: longest JTAG chain is 18 AMT
    );
    port(
        -- master control signals
        clk  : in std_logic; -- runs 2x the tck speed
        rst  : in std_logic; -- async reset
        en   : in  std_logic; -- enable; must go low then high again for repeated start
        busy : out std_logic := '0'; -- active-high; ready for new inst/data word when low
        
        -- jtag signals
        tms  : out std_logic;
        tck  : out std_logic;
        trst : out std_logic := '1'; -- active-low
        tdi  : out std_logic := '0';
--      tdo  : in std_logic;
        
        -- jtag transmission parameters: instruction and data registers/lengths, JTAG chain length
        inst_reg  : in std_logic_vector(inst_len - 1 downto 0);
        data_len  : in unsigned(num_data_len_bits - 1 downto 0);
        data_reg  : in std_logic_vector(2**num_data_len_bits - 1 downto 0);
        chain_len : in unsigned(num_chain_len_bits - 1 downto 0)
    );
end jtag_master;

architecture simple_instr of jtag_master is
    -- cf. IEEE 1149.1-2013 Figure 6-1;
    -- "I" states are for the instruction register path,
    -- "D" states for the data register path,
    -- and "F" states are "final"
    type state_type is (
        TEST_LOGIC_RESET,
        I_RUN_TEST_IDLE,
        I_SELECT_DR_SCAN,
        I_SELECT_IR_SCAN,
        I_CAPTURE_IR,
        I_SHIFT_IR_INIT,  -- non-tx part of SHIFT-IR
        I_SHIFT_EXIT1_IR, -- combined state: SHIFT-IR and EXIT1-IR
        I_UPDATE_IR,
        D_SELECT_DR_SCAN,
        D_CAPTURE_DR,
        D_SHIFT_DR_INIT,  -- non-tx part of SHIFT-DR
        D_SHIFT_EXIT1_DR, -- combined state: SHIFT-DR and EXIT1-DR
        D_UPDATE_DR,
        F_RUN_TEST_IDLE   -- NB: this is a busy state
    );
    signal state_curr, state_next : state_type := TEST_LOGIC_RESET;
    
    constant TIMER_MAX : natural := 2**num_data_len_bits - 1; -- count up to maximum data length
    signal timer, bit_curr : natural range 0 to TIMER_MAX; -- these signals control how long we remain in a state
                                                           -- as well as the register bit transmitted
    -- this controls the transmission on tdi
    type tx_status_type is (
        IDLE,
        INST,
        DATA
    );
    signal tx_status_curr, tx_status_next : tx_status_type := IDLE;
    
    signal last_bit : boolean := false; -- we set this true to support some tms logic during transmission
    
    signal tck_rising : boolean := false; -- this allows us to transition states with the falling edge of tck
begin
    -- JTAG clock signal
    tck_gen : process(clk, rst) is
    begin
        if rst = '1' then
            tck <= '0';
            tck_rising <= true;
        elsif rising_edge(clk) then
            -- assign value of tck for next clock cycle
            if tck_rising then 
                tck <= '0';
                tck_rising <= false;
            else
                tck <= '1';
                tck_rising <= true;
            end if;
        end if;
    end process tck_gen;
    
    -- synchronous logic for state machine
    sync : process(clk, rst) is
        variable dev_cnt : natural range 0 to 2**num_chain_len_bits - 1 := 0;
    begin
        if rst = '1' then
            state_curr <= TEST_LOGIC_RESET;
            tx_status_curr <= IDLE;
            bit_curr <= 0;
        elsif rising_edge(clk) then
            -- prepare a (timed) state transition for the falling edge of tck
            if tck_rising then
                case tx_status_curr is
                    when IDLE =>
                        if (bit_curr + 1 >= timer) then
                            state_curr <= state_next;
                            tx_status_curr <= tx_status_next;
                            bit_curr <= 0;
                            dev_cnt  := 0;
                        else
                            bit_curr <= bit_curr + 1;
                        end if;
                        last_bit <= false;
                    when INST | DATA =>
                        -- we must transmit once for each device
                        if (bit_curr + 1 >= timer) then
                            bit_curr <= 0;
                            dev_cnt := dev_cnt + 1;
                            if (dev_cnt >= chain_len) then
                                state_curr <= state_next;
                                tx_status_curr <= tx_status_next;
                                bit_curr <= 0;
                                dev_cnt  := 0;
                                last_bit <= false;
                            end if;
                        else
                            -- prepare tms logic that occurs on last bit
                            if (dev_cnt + 1 = chain_len) and (bit_curr + 2 = timer) then
                                last_bit <= true;
                            else
                                last_bit <= false;
                            end if;
                            bit_curr <= bit_curr + 1;
                        end if;
                end case;
            end if;
        end if;
    end process sync;
    
    -- combinational logic for state machine; tms, busy, state transition
    comb : process(state_curr, en, data_len, last_bit) is
    begin
        -- JTAG tms and state transition
        case state_curr is
            when TEST_LOGIC_RESET =>
                tms <= '1';
                timer <= 6; -- guarantees at least 5 tck rising edges
                state_next <= I_RUN_TEST_IDLE;
                tx_status_next <= IDLE;
            when I_RUN_TEST_IDLE =>
                tms <= '0';
                timer <= 1;
                if en = '1' then
                    state_next <= I_SELECT_DR_SCAN;
                else
                    state_next <= I_RUN_TEST_IDLE;
                end if;
                tx_status_next <= IDLE;
            when I_SELECT_DR_SCAN =>
                tms <= '1';
                timer <= 1;
                state_next <= I_SELECT_IR_SCAN;
                tx_status_next <= IDLE;
            when I_SELECT_IR_SCAN =>
                tms <= '1';
                timer <= 1;
                state_next <= I_CAPTURE_IR;
                tx_status_next <= IDLE;
            when I_CAPTURE_IR =>
                tms <= '0';
                timer <= 1;
                state_next <= I_SHIFT_IR_INIT;
                tx_status_next <= IDLE;
            when I_SHIFT_IR_INIT =>
                tms <= '0';
                timer <= 1;
                state_next <= I_SHIFT_EXIT1_IR;
                tx_status_next <= INST;
            when I_SHIFT_EXIT1_IR =>
                if not last_bit then
                    tms <= '0'; -- SHIFT
                else
                    tms <= '1'; -- EXIT1
                end if;
                timer <= inst_len;
                state_next <= I_UPDATE_IR;
                tx_status_next <= IDLE;
            when I_UPDATE_IR =>
                tms <= '1';
                timer <= 1;
                state_next <= D_SELECT_DR_SCAN;
                tx_status_next <= IDLE;
            when D_SELECT_DR_SCAN =>
                tms <= '1';
                timer <= 1;
                state_next <= D_CAPTURE_DR;
                tx_status_next <= IDLE;
            when D_CAPTURE_DR =>
                tms <= '0';
                timer <= 1;
                state_next <= D_SHIFT_DR_INIT;
                tx_status_next <= IDLE;
            when D_SHIFT_DR_INIT =>
                tms <= '0';
                timer <= 1;
                state_next <= D_SHIFT_EXIT1_DR;
                tx_status_next <= DATA;
            when D_SHIFT_EXIT1_DR =>
                if not last_bit then
                    tms <= '0'; -- SHIFT
                    tx_status_next <= DATA;
                else
                    tms <= '1'; -- EXIT1
                    tx_status_next <= IDLE;
                end if;
                timer <= to_integer(data_len);
                state_next <= D_UPDATE_DR;
            when D_UPDATE_DR =>
                tms <= '1';
                timer <= 1;
                state_next <= F_RUN_TEST_IDLE;
                tx_status_next <= IDLE;
            when F_RUN_TEST_IDLE =>
                tms <= '0';
                timer <= 1;
                if en = '0' then
                    state_next <= I_RUN_TEST_IDLE;
                else
                    state_next <= F_RUN_TEST_IDLE;
                end if;
                tx_status_next <= IDLE;
        end case;
        
        -- busy signal
        case state_curr is
            when I_RUN_TEST_IDLE =>
                busy <= '0';
            when others =>
                busy <= '1';
        end case;
    end process comb;
    
    -- combinational logic: JTAG tdi
    tdi_gen : process(tx_status_curr, bit_curr, inst_reg, data_reg) is
    begin
        case tx_status_curr is
            when IDLE =>
                tdi <= '0';
            when INST =>
                tdi <= inst_reg(bit_curr);
            when DATA =>
                tdi <= data_reg(bit_curr);
        end case;
    end process tdi_gen;
end architecture simple_instr;

---- Description: this architecture, for debug purposes, only executes the data 
----              path, never writing to the instruction register.
--architecture simple_data of jtag_master is
--    -- cf. IEEE 1149.1-2013 Figure 6-1;
--    -- "D" states for the data register path,
--    -- and "F" states are "final"
--    type state_type is (
--        TEST_LOGIC_RESET,
--        D_RUN_TEST_IDLE,
--        D_SELECT_DR_SCAN,
--        D_CAPTURE_DR,
--        D_SHIFT_DR_INIT,  -- non-tx part of SHIFT-DR
--        D_SHIFT_EXIT1_DR, -- combined state: SHIFT-DR and EXIT1-DR
--        D_UPDATE_DR,
--        F_RUN_TEST_IDLE   -- NB: this is a busy state
--    );
--    signal state_curr, state_next : state_type := TEST_LOGIC_RESET;
    
--    constant TIMER_MAX : natural := 2**num_data_len_bits - 1; -- count up to maximum data length
--    signal timer, bit_curr : natural range 0 to TIMER_MAX; -- these signals control how long we remain in a state
--                                                           -- as well as the register bit transmitted
--    -- this controls the transmission on tdi
--    type tx_status_type is (
--        IDLE,
--        DATA
--    );
--    signal tx_status_curr, tx_status_next : tx_status_type := IDLE;
    
--    signal last_bit : boolean := false; -- we set this true to support some tms logic during transmission
    
--    signal tck_rising : boolean := false; -- this allows us to transition states with the falling edge of tck
--begin
--    -- JTAG clock signal
--    tck_gen : process(clk, rst) is
--    begin
--        if rst = '1' then
--            tck <= '0';
--            tck_rising <= true;
--        elsif rising_edge(clk) then
--            -- assign value of tck for next clock cycle
--            if tck_rising then 
--                tck <= '0';
--                tck_rising <= false;
--            else
--                tck <= '1';
--                tck_rising <= true;
--            end if;
--        end if;
--    end process tck_gen;
    
--    -- synchronous logic for state machine
--    sync : process(clk, rst) is
--        variable dev_cnt : natural range 0 to 2**num_chain_len_bits - 1 := 0;
--    begin
--        if rst = '1' then
--            state_curr <= TEST_LOGIC_RESET;
--            tx_status_curr <= IDLE;
--            bit_curr <= 0;
--        elsif rising_edge(clk) then
--            -- prepare a (timed) state transition for the falling edge of tck
--            if tck_rising then
--                case tx_status_curr is
--                    when IDLE =>
--                        if (bit_curr + 1 >= timer) then
--                            state_curr <= state_next;
--                            tx_status_curr <= tx_status_next;
--                            bit_curr <= 0;
--                            dev_cnt  := 0;
--                        else
--                            bit_curr <= bit_curr + 1;
--                        end if;
--                        last_bit <= false;
--                    when DATA =>
--                        -- we must transmit once for each device
--                        if (bit_curr + 1 >= timer) then
--                            bit_curr <= 0;
--                            dev_cnt := dev_cnt + 1;
--                            if (dev_cnt >= chain_len) then
--                                state_curr <= state_next;
--                                tx_status_curr <= tx_status_next;
--                                bit_curr <= 0;
--                                dev_cnt  := 0;
--                                last_bit <= false;
--                            end if;
--                        else
--                            -- prepare tms logic that occurs on last bit
--                            if (dev_cnt + 1 = chain_len) and (bit_curr + 2 = timer) then
--                                last_bit <= true;
--                            else
--                                last_bit <= false;
--                            end if;
--                            bit_curr <= bit_curr + 1;
--                        end if;
--                end case;
--            end if;
--        end if;
--    end process sync;
    
--    -- combinational logic for state machine; tms, busy, state transition
--    comb : process(state_curr, en, data_len, last_bit) is
--    begin
--        -- JTAG tms and state transition
--        case state_curr is
--            when TEST_LOGIC_RESET =>
--                tms <= '1';
--                timer <= 6; -- guarantees at least 5 tck rising edges
--                state_next <= D_RUN_TEST_IDLE;
--                tx_status_next <= IDLE;
--            when D_RUN_TEST_IDLE =>
--                tms <= '0';
--                timer <= 1;
--                if en = '1' then
--                    state_next <= D_SELECT_DR_SCAN;
--                else
--                    state_next <= D_RUN_TEST_IDLE;
--                end if;
--                tx_status_next <= IDLE;
--            when D_SELECT_DR_SCAN =>
--                tms <= '1';
--                timer <= 1;
--                state_next <= D_CAPTURE_DR;
--                tx_status_next <= IDLE;
--            when D_CAPTURE_DR =>
--                tms <= '0';
--                timer <= 1;
--                state_next <= D_SHIFT_DR_INIT;
--                tx_status_next <= IDLE;
--            when D_SHIFT_DR_INIT =>
--                tms <= '0';
--                timer <= 1;
--                state_next <= D_SHIFT_EXIT1_DR;
--                tx_status_next <= DATA;
--            when D_SHIFT_EXIT1_DR =>
--                if not last_bit then
--                    tms <= '0'; -- SHIFT
--                    tx_status_next <= DATA;
--                else
--                    tms <= '1'; -- EXIT1
--                    tx_status_next <= IDLE;
--                end if;
--                timer <= to_integer(data_len);
--                state_next <= D_UPDATE_DR;
--            when D_UPDATE_DR =>
--                tms <= '1';
--                timer <= 1;
--                state_next <= F_RUN_TEST_IDLE;
--                tx_status_next <= IDLE;
--            when F_RUN_TEST_IDLE =>
--                tms <= '0';
--                timer <= 1;
--                if en = '0' then
--                    state_next <= D_RUN_TEST_IDLE;
--                else
--                    state_next <= F_RUN_TEST_IDLE;
--                end if;
--                tx_status_next <= IDLE;
--        end case;
        
--        -- busy signal
--        case state_curr is
--            when D_RUN_TEST_IDLE =>
--                busy <= '0';
--            when others =>
--                busy <= '1';
--        end case;
--    end process comb;
    
--    -- combinational logic: JTAG tdi
--    tdi_gen : process(tx_status_curr, bit_curr, inst_reg, data_reg) is
--    begin
--        case tx_status_curr is
--            when IDLE =>
--                tdi <= '0';
--            when DATA =>
--                tdi <= data_reg(bit_curr);
--        end case;
--    end process tdi_gen;
--end architecture simple_data;

--    -- TODO: tdi is a don't care for now
    
--end architecture simple_IDCODE;
